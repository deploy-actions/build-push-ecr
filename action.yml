name: Build & Push Docker Image to Amazon ECR 🐳
description: Github Action to Build & Push Docker Image to Amazon ECR
branding:
  icon: anchor
  color: orange

inputs:
  Name:
    description: ECR Repository Name
    required: true
  TagMutability:
    description: The tag mutability setting for the repository, possible value is one of "MUTABLE", "IMMUTABLE". default is MUTABLE
    required: false
    default: MUTABLE
  Tags:
    description: Docker Image Tags
    required: false
    default: latest
  IfNotExist:
    description: If the provided image tag already exists, the action will be canceled.
    required: false
  Path:
    description: Relative Path of Dockerfile, relative to the github repository root.
    required: false
    default: "."
  Dockerfile:
    description: Dockerfile Name
    required: false
    default: "Dockerfile"

runs:
  using: composite

  steps:
    - shell: bash
      run: aws sts get-caller-identity >/dev/null 2>&1

    - id: ecr
      uses: aws-actions/amazon-ecr-login@main

    # create if not exist repository
    - shell: bash
      run: |
        if ! aws ecr describe-repositories --repository-name ${{ inputs.Name }} >/dev/null 2>&1; then
          aws ecr create-repository --repository-name ${{ inputs.Name }} --image-tag-mutability ${{ inputs.TagMutability }}
          echo "::notice title=ECR Repository Created::${{ steps.ecr.outputs.registry }}/${{ inputs.Name }}"
        fi

    - shell: bash
      id: image
      run: |
        Image=${{ steps.ecr.outputs.registry }}/${{ inputs.Name }}

        if [ -n "${{ inputs.IfNotExist }}" ]; then
          if aws ecr describe-images --repository-name ${{ inputs.Name }} --image-ids imageTag=${{ inputs.IfNotExist }} >/dev/null 2>&1; then
            echo "Image Tag ${{ inputs.IfNotExist }} is already exist."
            DIGEST=$(aws ecr describe-images --repository-name ${{ inputs.Name }} --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageDigest' --output text)
            echo "uri=$Image@$DIGEST" >> "$GITHUB_OUTPUT"
            exit 0
          fi
        fi

        docker build -t $Image -f "${{ inputs.Dockerfile }}" "${{ inputs.Path }}"

        raw_tags=($(echo "${{ inputs.Tags }}" | tr ',' ' '))

        tags=()
        for tag in "${raw_tags[@]}"; do
          [[ -n "$tag" ]] && tags+=("$tag")
        done

        for tag in "${tags[@]}"; do
          docker tag $Image $Image:$tag
          docker push $Image:$tag
        done

        DIGEST=$(aws ecr describe-images --repository-name ${{ inputs.Name }} --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageDigest' --output text)
        echo "uri=$Image@$DIGEST" >> "$GITHUB_OUTPUT"

outputs:
  ImageUri:
    description: Docker Image URI
    value: ${{ steps.image.outputs.uri }}
